package org.apache.ivy.plugins.parser.p064m2;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.ivy.Ivy;
import org.apache.ivy.core.IvyContext;
import org.apache.ivy.core.IvyPatternHelper;
import org.apache.ivy.core.module.descriptor.Artifact;
import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
import org.apache.ivy.core.module.descriptor.ExcludeRule;
import org.apache.ivy.core.module.descriptor.ModuleDescriptor;
import org.apache.ivy.core.module.p062id.ModuleRevisionId;
import org.apache.ivy.core.settings.IvyVariableContainer;
import org.apache.ivy.osgi.p063p2.P2MetadataParser;
import org.apache.ivy.plugins.parser.p064m2.PomWriterOptions;
import org.apache.ivy.util.ConfigurationUtils;
import org.apache.ivy.util.StringUtils;

/* loaded from: classes6.dex */
public final class PomModuleDescriptorWriter {
    public static final PomWriterOptions.ConfigurationScopeMapping DEFAULT_MAPPING = new PomWriterOptions.ConfigurationScopeMapping(new LinkedHashMap<String, String>() { // from class: org.apache.ivy.plugins.parser.m2.PomModuleDescriptorWriter.1
        {
            put("compile", "compile");
            put("runtime", "runtime");
            put(P2MetadataParser.ProvidedHandler.PROVIDED, P2MetadataParser.ProvidedHandler.PROVIDED);
            put("test", "test");
            put("system", "system");
        }
    });
    public static final String SKIP_LINE = "SKIP_LINE";

    public static void write(ModuleDescriptor moduleDescriptor, File file, PomWriterOptions pomWriterOptions) throws IOException {
        LineNumberReader lineNumberReader;
        if (pomWriterOptions.getTemplate() == null) {
            lineNumberReader = new LineNumberReader(new InputStreamReader(PomModuleDescriptorWriter.class.getResourceAsStream("pom.template")));
        } else {
            lineNumberReader = new LineNumberReader(new InputStreamReader(new FileInputStream(pomWriterOptions.getTemplate())));
        }
        if (file.getParentFile() != null) {
            file.getParentFile().mkdirs();
        }
        PrintWriter printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8));
        try {
            IvyVariableContainerWrapper ivyVariableContainerWrapper = new IvyVariableContainerWrapper(IvyContext.getContext().getSettings().getVariableContainer());
            ivyVariableContainerWrapper.setVariable("ivy.pom.license", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.header", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.groupId", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.artifactId", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.version", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.packaging", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.name", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.description", SKIP_LINE, true);
            ivyVariableContainerWrapper.setVariable("ivy.pom.url", SKIP_LINE, true);
            if (pomWriterOptions.getLicenseHeader() != null) {
                ivyVariableContainerWrapper.setVariable("ivy.pom.license", pomWriterOptions.getLicenseHeader(), true);
            }
            if (pomWriterOptions.isPrintIvyInfo()) {
                ivyVariableContainerWrapper.setVariable("ivy.pom.header", "<!--\n   Apache Maven 2 POM generated by Apache Ivy\n   " + Ivy.getIvyHomeURL() + "\n   Apache Ivy version: " + Ivy.getIvyVersion() + " " + Ivy.getIvyDate() + "\n-->", true);
            }
            setModuleVariables(moduleDescriptor, ivyVariableContainerWrapper, pomWriterOptions);
            String line = lineNumberReader.readLine();
            int i = 0;
            boolean z = false;
            while (line != null) {
                String strSubstituteVariables = IvyPatternHelper.substituteVariables(line, ivyVariableContainerWrapper);
                if (strSubstituteVariables.contains(SKIP_LINE)) {
                    line = lineNumberReader.readLine();
                } else if (strSubstituteVariables.trim().isEmpty()) {
                    printWriter.println(strSubstituteVariables);
                    line = lineNumberReader.readLine();
                } else {
                    int iIndexOf = strSubstituteVariables.indexOf(60);
                    if (!z && strSubstituteVariables.contains("</dependencies>")) {
                        printDependencies(moduleDescriptor, printWriter, pomWriterOptions, iIndexOf, false);
                        z = true;
                    }
                    if (!z && strSubstituteVariables.contains("</project>")) {
                        printDependencies(moduleDescriptor, printWriter, pomWriterOptions, i, true);
                        z = true;
                    }
                    printWriter.println(strSubstituteVariables);
                    line = lineNumberReader.readLine();
                    i = iIndexOf;
                }
            }
            lineNumberReader.close();
            printWriter.close();
        } catch (Throwable th) {
            lineNumberReader.close();
            printWriter.close();
            throw th;
        }
    }

    public static void setModuleVariables(ModuleDescriptor moduleDescriptor, IvyVariableContainer ivyVariableContainer, PomWriterOptions pomWriterOptions) {
        ModuleRevisionId moduleRevisionId = moduleDescriptor.getModuleRevisionId();
        ivyVariableContainer.setVariable("ivy.pom.groupId", moduleRevisionId.getOrganisation(), true);
        String artifactName = pomWriterOptions.getArtifactName();
        if (artifactName == null) {
            artifactName = moduleRevisionId.getName();
        }
        String artifactPackaging = pomWriterOptions.getArtifactPackaging();
        if (artifactPackaging == null) {
            Artifact artifactFindArtifact = findArtifact(moduleDescriptor, artifactName);
            if (artifactFindArtifact == null) {
                artifactPackaging = "pom";
            } else {
                artifactPackaging = artifactFindArtifact.getType();
            }
        }
        ivyVariableContainer.setVariable("ivy.pom.artifactId", artifactName, true);
        ivyVariableContainer.setVariable("ivy.pom.packaging", artifactPackaging, true);
        if (moduleRevisionId.getRevision() != null) {
            ivyVariableContainer.setVariable("ivy.pom.version", moduleRevisionId.getRevision(), true);
        }
        if (pomWriterOptions.getDescription() != null) {
            ivyVariableContainer.setVariable("ivy.pom.description", pomWriterOptions.getDescription(), true);
        } else if (!StringUtils.isNullOrEmpty(moduleDescriptor.getDescription())) {
            ivyVariableContainer.setVariable("ivy.pom.description", moduleDescriptor.getDescription(), true);
        }
        if (moduleDescriptor.getHomePage() != null) {
            ivyVariableContainer.setVariable("ivy.pom.url", moduleDescriptor.getHomePage(), true);
        }
    }

    public static Artifact findArtifact(ModuleDescriptor moduleDescriptor, String str) {
        for (Artifact artifact : moduleDescriptor.getAllArtifacts()) {
            if (artifact.getName().equals(str) && artifact.getAttribute("classifier") == null) {
                return artifact;
            }
        }
        return null;
    }

    public static void indent(PrintWriter printWriter, int i) {
        for (int i2 = 0; i2 < i; i2++) {
            printWriter.print(' ');
        }
    }

    public static void printDependencies(ModuleDescriptor moduleDescriptor, PrintWriter printWriter, PomWriterOptions pomWriterOptions, int i, boolean z) {
        int i2;
        int i3;
        List<PomWriterOptions.ExtraDependency> extraDependencies = pomWriterOptions.getExtraDependencies();
        DependencyDescriptor[] dependencies = getDependencies(moduleDescriptor, pomWriterOptions);
        if (!extraDependencies.isEmpty() || dependencies.length > 0) {
            if (z) {
                indent(printWriter, i);
                printWriter.println("<dependencies>");
            }
            for (PomWriterOptions.ExtraDependency extraDependency : extraDependencies) {
                String group = extraDependency.getGroup();
                if (group == null) {
                    group = moduleDescriptor.getModuleRevisionId().getOrganisation();
                }
                String str = group;
                String version = extraDependency.getVersion();
                if (version == null) {
                    version = moduleDescriptor.getModuleRevisionId().getRevision();
                }
                printDependency(printWriter, i, str, extraDependency.getArtifact(), version, extraDependency.getType(), extraDependency.getClassifier(), extraDependency.getScope(), extraDependency.isOptional(), true, null);
            }
            PomWriterOptions.ConfigurationScopeMapping mapping = pomWriterOptions.getMapping();
            if (mapping == null) {
                mapping = DEFAULT_MAPPING;
            }
            PomWriterOptions.ConfigurationScopeMapping configurationScopeMapping = mapping;
            int length = dependencies.length;
            int i4 = 0;
            while (i4 < length) {
                DependencyDescriptor dependencyDescriptor = dependencies[i4];
                ModuleRevisionId dependencyRevisionId = dependencyDescriptor.getDependencyRevisionId();
                ExcludeRule[] allExcludeRules = dependencyDescriptor.canExclude() ? dependencyDescriptor.getAllExcludeRules() : null;
                DependencyArtifactDescriptor[] allDependencyArtifacts = dependencyDescriptor.getAllDependencyArtifacts();
                String str2 = "classifier";
                if (allDependencyArtifacts.length > 0) {
                    int length2 = allDependencyArtifacts.length;
                    int i5 = 0;
                    while (i5 < length2) {
                        DependencyArtifactDescriptor dependencyArtifactDescriptor = allDependencyArtifacts[i5];
                        printDependency(printWriter, i, dependencyRevisionId.getOrganisation(), dependencyRevisionId.getName(), dependencyRevisionId.getRevision(), dependencyArtifactDescriptor.getType(), dependencyArtifactDescriptor.getExtraAttribute(str2), configurationScopeMapping.getScope(dependencyDescriptor.getModuleConfigurations()), configurationScopeMapping.isOptional(dependencyDescriptor.getModuleConfigurations()), dependencyDescriptor.isTransitive(), allExcludeRules);
                        i5++;
                        dependencyDescriptor = dependencyDescriptor;
                        str2 = str2;
                        length2 = length2;
                        length = length;
                        allDependencyArtifacts = allDependencyArtifacts;
                        i4 = i4;
                    }
                    i2 = i4;
                    i3 = length;
                } else {
                    i2 = i4;
                    i3 = length;
                    printDependency(printWriter, i, dependencyRevisionId.getOrganisation(), dependencyRevisionId.getName(), dependencyRevisionId.getRevision(), null, dependencyDescriptor.getExtraAttribute("classifier"), configurationScopeMapping.getScope(dependencyDescriptor.getModuleConfigurations()), configurationScopeMapping.isOptional(dependencyDescriptor.getModuleConfigurations()), dependencyDescriptor.isTransitive(), allExcludeRules);
                }
                i4 = i2 + 1;
                length = i3;
            }
            if (z) {
                indent(printWriter, i);
                printWriter.println("</dependencies>");
            }
        }
    }

    public static void printDependency(PrintWriter printWriter, int i, String str, String str2, String str3, String str4, String str5, String str6, boolean z, boolean z2, ExcludeRule[] excludeRuleArr) {
        int i2 = i * 2;
        indent(printWriter, i2);
        printWriter.println("<dependency>");
        int i3 = i * 3;
        indent(printWriter, i3);
        printWriter.println("<groupId>" + str + "</groupId>");
        indent(printWriter, i3);
        printWriter.println("<artifactId>" + str2 + "</artifactId>");
        indent(printWriter, i3);
        printWriter.println("<version>" + str3 + "</version>");
        if (str4 != null && !"jar".equals(str4)) {
            indent(printWriter, i3);
            printWriter.println("<type>" + str4 + "</type>");
        }
        if (str5 != null) {
            indent(printWriter, i3);
            printWriter.println("<classifier>" + str5 + "</classifier>");
        }
        if (str6 != null) {
            indent(printWriter, i3);
            printWriter.println("<scope>" + str6 + "</scope>");
        }
        if (z) {
            indent(printWriter, i3);
            printWriter.println("<optional>true</optional>");
        }
        if (!z2) {
            indent(printWriter, i3);
            printWriter.println("<exclusions>");
            int i4 = i * 4;
            indent(printWriter, i4);
            printWriter.println("<exclusion>");
            int i5 = i * 5;
            indent(printWriter, i5);
            printWriter.println("<groupId>*</groupId>");
            indent(printWriter, i5);
            printWriter.println("<artifactId>*</artifactId>");
            indent(printWriter, i4);
            printWriter.println("</exclusion>");
            indent(printWriter, i3);
            printWriter.println("</exclusions>");
        } else if (excludeRuleArr != null) {
            printExclusions(excludeRuleArr, printWriter, i);
        }
        indent(printWriter, i2);
        printWriter.println("</dependency>");
    }

    public static void printExclusions(ExcludeRule[] excludeRuleArr, PrintWriter printWriter, int i) {
        int i2 = i * 3;
        indent(printWriter, i2);
        printWriter.println("<exclusions>");
        for (ExcludeRule excludeRule : excludeRuleArr) {
            int i3 = i * 4;
            indent(printWriter, i3);
            printWriter.println("<exclusion>");
            int i4 = i * 5;
            indent(printWriter, i4);
            printWriter.println("<groupId>" + excludeRule.getId().getModuleId().getOrganisation() + "</groupId>");
            indent(printWriter, i4);
            printWriter.println("<artifactId>" + excludeRule.getId().getModuleId().getName() + "</artifactId>");
            indent(printWriter, i3);
            printWriter.println("</exclusion>");
        }
        indent(printWriter, i2);
        printWriter.println("</exclusions>");
    }

    public static DependencyDescriptor[] getDependencies(ModuleDescriptor moduleDescriptor, PomWriterOptions pomWriterOptions) {
        String[] strArrReplaceWildcards = ConfigurationUtils.replaceWildcards(pomWriterOptions.getConfs(), moduleDescriptor);
        ArrayList arrayList = new ArrayList();
        for (DependencyDescriptor dependencyDescriptor : moduleDescriptor.getDependencies()) {
            String[] dependencyConfigurations = dependencyDescriptor.getDependencyConfigurations(strArrReplaceWildcards);
            if (dependencyConfigurations != null && dependencyConfigurations.length > 0) {
                arrayList.add(dependencyDescriptor);
            }
        }
        return (DependencyDescriptor[]) arrayList.toArray(new DependencyDescriptor[arrayList.size()]);
    }

    /* loaded from: classes5.dex */
    public static final class IvyVariableContainerWrapper implements IvyVariableContainer {
        public Map<String, String> localVariables;
        public final IvyVariableContainer variables;

        public IvyVariableContainerWrapper(IvyVariableContainer ivyVariableContainer) {
            this.localVariables = new HashMap();
            this.variables = ivyVariableContainer;
        }

        @Override // org.apache.ivy.core.settings.IvyVariableContainer
        public void setVariable(String str, String str2, boolean z) {
            this.localVariables.put(str, str2);
        }

        @Override // org.apache.ivy.core.settings.IvyVariableContainer
        public void setEnvironmentPrefix(String str) {
            this.variables.setEnvironmentPrefix(str);
        }

        @Override // org.apache.ivy.core.settings.IvyVariableContainer
        public String getVariable(String str) {
            String variable = this.variables.getVariable(str);
            return variable == null ? this.localVariables.get(str) : variable;
        }

        @Override // org.apache.ivy.core.settings.IvyVariableContainer
        public Object clone() {
            throw new UnsupportedOperationException();
        }
    }
}
